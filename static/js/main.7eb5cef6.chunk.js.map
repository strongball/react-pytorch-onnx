{"version":3,"sources":["utils/image.ts","utils/fns.ts","utils/onnx.ts","containers/FromCamera.tsx","containers/FromFile.tsx","App.tsx","index.tsx"],"names":["loadImage","url","Promise","resolve","reject","im","Image","crossOrigin","src","onload","drawImageToCanvas","imageUrl","options","a","canvas","document","createElement","resizeDrawToCanvas","image","sourceSize","width","height","targetSize","imageSize","source","hRatio","vRatio","ratio","Math","min","drawWidth","drwaHeight","centerShift_x","centerShift_y","context","getContext","clearRect","drawImage","canvasToArray","imageData","getImageData","Float32Array","from","data","values","fromHWCToCHW","dataFromImage","ndarray","dataProcessed","ops","divseq","assign","pick","topk","k","Array","map","value","index","sort","b","slice","loadModel","path","console","log","arrayBuffer","InferenceSession","create","session","useStyles","makeStyles","createStyles","progress","position","top","left","viewCenter","textAlign","view","background","captureControl","display","justifyContent","bottom","right","imageOptions","HomeContainer","props","classes","videoRef","useRef","videoStreamRef","canvasRef","useState","loading","setLoading","setRecordLoading","topkResult","setTopkResult","sessionPromise","useEffect","current","process","modelInputRef","modelInputChange","files","length","predit","alert","arrImage","imageCHW","inputTensor","Tensor","run","input","outputMap","output","topk5","error","captureVideo","max","coverDrawToCanvas","videoWidth","videoHeight","startTracking","navigator","mediaDevices","getUserMedia","audio","video","facingMode","aspectRatio","stream","srcObject","getTracks","forEach","track","stop","stopTracking","Grid","container","spacing","item","xs","md","Card","CardActions","Button","size","color","variant","onClick","click","ref","style","type","onChange","e","target","CardContent","className","CircularProgress","autoPlay","id","IconButton","Camera","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","ImageNetClassname","toString","secondary","toFixed","setURL","imageInputRef","name","accept","URL","createObjectURL","theme","title","flexGrow","body","marginTop","App","basename","AppBar","Toolbar","Typography","noWrap","component","Link","to","Container","exact","FromFileContainer","FromCameraContainer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7eb5cef6.chunk.js","sourcesContent":["import ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\n\nexport function loadImage(url: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const im = new Image();\n        im.crossOrigin = 'anonymous';\n        im.src = url;\n        im.onload = () => {\n            resolve(im);\n        };\n    });\n}\n\nexport interface ImageSize {\n    width: number;\n    height: number;\n}\ninterface DrawImageToCanvasOptions {\n    canvas?: HTMLCanvasElement;\n    imageSize: ImageSize;\n}\nexport async function drawImageToCanvas(\n    imageUrl: string,\n    options: DrawImageToCanvasOptions\n): Promise<HTMLCanvasElement> {\n    const canvas = options.canvas || document.createElement('canvas');\n    const image = await loadImage(imageUrl);\n    resizeDrawToCanvas(image, canvas, {\n        sourceSize: {\n            width: image.width,\n            height: image.height,\n        },\n        targetSize: {\n            width: options.imageSize.width,\n            height: options.imageSize.height,\n        },\n    });\n    return canvas;\n}\n\ninterface ResizeDrawToCanvasOptions {\n    sourceSize: ImageSize;\n    targetSize: ImageSize;\n}\nexport function resizeDrawToCanvas(\n    source: CanvasImageSource,\n    canvas: HTMLCanvasElement,\n    options: ResizeDrawToCanvasOptions\n) {\n    const { sourceSize, targetSize } = options;\n    const hRatio = targetSize.width / sourceSize.width;\n    const vRatio = targetSize.height / sourceSize.height;\n    const ratio = Math.min(hRatio, vRatio);\n    const drawWidth = sourceSize.width * ratio;\n    const drwaHeight = sourceSize.height * ratio;\n    const centerShift_x = (targetSize.width - drawWidth) / 2;\n    const centerShift_y = (targetSize.height - drwaHeight) / 2;\n\n    const context = canvas.getContext('2d')!;\n    context.clearRect(0, 0, sourceSize.width, sourceSize.height);\n    context.drawImage(\n        source,\n        0,\n        0,\n        sourceSize.width,\n        sourceSize.height,\n        centerShift_x,\n        centerShift_y,\n        drawWidth,\n        drwaHeight\n    );\n}\n\ninterface CoverDrawToCanvasOptions {\n    sourceSize: ImageSize;\n    targetSize: ImageSize;\n}\nexport function coverDrawToCanvas(\n    source: CanvasImageSource,\n    canvas: HTMLCanvasElement,\n    options: CoverDrawToCanvasOptions\n) {\n    const { sourceSize, targetSize } = options;\n    const hRatio = targetSize.width / sourceSize.width;\n    const vRatio = targetSize.height / sourceSize.height;\n    const ratio = Math.max(hRatio, vRatio);\n    const drawWidth = sourceSize.width * ratio;\n    const drwaHeight = sourceSize.height * ratio;\n    const centerShift_x = (targetSize.width - drawWidth) / 2;\n    const centerShift_y = (targetSize.height - drwaHeight) / 2;\n\n    const context = canvas.getContext('2d')!;\n    context.drawImage(\n        source,\n        0,\n        0,\n        sourceSize.width,\n        sourceSize.height,\n        centerShift_x,\n        centerShift_y,\n        drawWidth,\n        drwaHeight\n    );\n}\n\nexport function canvasToArray(canvas: HTMLCanvasElement): Float32Array {\n    const context = canvas.getContext('2d')!;\n    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    return Float32Array.from(imageData.data.values());\n}\n\n/**\n *\n * @param data [h, w, c]\n * @param options ImageSize\n * @returns [batch, c, h, w]\n */\nexport function fromHWCToCHW(data: Float32Array, options: ImageSize): Float32Array {\n    const { height, width } = options;\n    const dataFromImage = ndarray(new Float32Array(data), [height, width, 4]);\n    const dataProcessed = ndarray(new Float32Array(width * height * 3), [1, 3, height, width]);\n    ops.divseq(dataFromImage, 255.0);\n    ops.assign(dataProcessed.pick(0, 0, null, null), dataFromImage.pick(null, null, 0));\n    ops.assign(dataProcessed.pick(0, 1, null, null), dataFromImage.pick(null, null, 1));\n    ops.assign(dataProcessed.pick(0, 2, null, null), dataFromImage.pick(null, null, 2));\n\n    return dataProcessed.data;\n}\n","export interface TopkResult {\n    index: number;\n    value: number;\n}\nexport function topk(data: Float32Array, k = 5): TopkResult[] {\n    return Array.from(data)\n        .map<TopkResult>((value, index) => ({\n            index,\n            value,\n        }))\n        .sort((a, b) => b.value - a.value)\n        .slice(0, k);\n}\n","import { InferenceSession } from 'onnxruntime-web';\n\nexport async function loadModel(path: File | string) {\n    console.log(path);\n    const data = typeof path === 'string' ? path : await path.arrayBuffer();\n    const session = await InferenceSession.create(data as any);\n    return session;\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Tensor, InferenceSession } from 'onnxruntime-web';\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CircularProgress,\n    makeStyles,\n    createStyles,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemAvatar,\n    Avatar,\n    IconButton,\n} from '@material-ui/core';\nimport { PlayArrow, Camera } from '@material-ui/icons';\nimport { canvasToArray, fromHWCToCHW, ImageSize, coverDrawToCanvas } from '../utils/image';\nimport { topk, TopkResult } from '../utils/fns';\nimport { loadModel } from '../utils/onnx';\n\nimport ImageNetClassname from '../classname.json';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        progress: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n        },\n        viewCenter: {\n            position: 'relative',\n            textAlign: 'center',\n        },\n        view: {\n            background: '#efefef',\n        },\n        captureControl: {\n            position: 'absolute',\n            display: 'flex',\n            justifyContent: 'center',\n            bottom: 0,\n            left: 0,\n            right: 0,\n        },\n    })\n);\n\nconst imageOptions: ImageSize = {\n    width: 224,\n    height: 224,\n};\n\ninterface Props {}\nconst HomeContainer: React.FC<Props> = (props) => {\n    const classes = useStyles();\n\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const videoStreamRef = useRef<MediaStream>();\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [recordLoading, setRecordLoading] = useState<boolean>(false);\n\n    const [topkResult, setTopkResult] = useState<TopkResult[]>([]);\n\n    const sessionPromise = useRef<Promise<InferenceSession>>();\n\n    useEffect(() => {\n        sessionPromise.current = loadModel(process.env.PUBLIC_URL + '/mobilenet_v3_small.onnx');\n    }, []);\n\n    const modelInputRef = useRef<HTMLInputElement>(null);\n    const handlePickModel = () => {\n        modelInputRef.current?.click();\n    };\n    const modelInputChange = async (files?: File[]) => {\n        if (!files || files.length === 0) {\n            return;\n        }\n        sessionPromise.current = loadModel(files[0]);\n    };\n\n    const predit = async () => {\n        if (!canvasRef.current) {\n            return;\n        }\n        if (!sessionPromise.current) {\n            alert('沒有選擇模型!');\n            return;\n        }\n        setLoading(true);\n        try {\n            console.log('start pred');\n            const session = await sessionPromise.current;\n            const arrImage = canvasToArray(canvasRef.current);\n            const imageCHW = fromHWCToCHW(arrImage, imageOptions);\n            const inputTensor = new Tensor('float32', imageCHW, [1, 3, 224, 224]);\n            const outputMap = await session.run({ input: inputTensor });\n            const output: Float32Array = outputMap['outpus'].data as Float32Array;\n            const topk5 = topk(output);\n            setTopkResult(topk5);\n        } catch (err) {\n            console.error(err);\n        }\n        setLoading(false);\n    };\n\n    const captureVideo = () => {\n        if (videoRef.current && canvasRef.current) {\n            coverDrawToCanvas(videoRef.current, canvasRef.current, {\n                sourceSize: {\n                    width: videoRef.current.videoWidth,\n                    height: videoRef.current.videoHeight,\n                },\n                targetSize: {\n                    width: canvasRef.current.width,\n                    height: canvasRef.current.height,\n                },\n            });\n            predit();\n        }\n    };\n    const startTracking = async () => {\n        setRecordLoading(true);\n        if (videoRef.current && navigator.mediaDevices.getUserMedia) {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio: false,\n                video: {\n                    width: 480,\n                    height: 360,\n                    facingMode: 'environment',\n                    aspectRatio: 1,\n                },\n            });\n            videoRef.current.srcObject = stream;\n            videoStreamRef.current = stream;\n        }\n    };\n    const stopTracking = () => {\n        setRecordLoading(false);\n        if (videoRef.current?.srcObject) {\n            videoRef.current.srcObject = null;\n        }\n        if (videoStreamRef.current) {\n            videoStreamRef.current.getTracks().forEach((track) => track.stop());\n        }\n    };\n    useEffect(() => {\n        return () => {\n            stopTracking();\n            console.log('call');\n        };\n    }, []);\n    return (\n        <Grid container spacing={2} justifyContent=\"center\">\n            <Grid item xs={12} md={4}>\n                <Card>\n                    <CardActions>\n                        <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={() => startTracking()}>\n                            開始錄影\n                        </Button>\n                        <Button size=\"small\" color=\"secondary\" variant=\"contained\" onClick={handlePickModel}>\n                            更換模型\n                            <input\n                                ref={modelInputRef}\n                                style={{ display: 'none' }}\n                                type=\"file\"\n                                onChange={(e) => modelInputChange(e.target?.files as any as File[])}\n                            ></input>\n                        </Button>\n                    </CardActions>\n                    <CardContent className={classes.viewCenter}>\n                        {loading && (\n                            <div className={classes.progress}>\n                                <CircularProgress />\n                            </div>\n                        )}\n                        <video ref={videoRef} autoPlay width=\"224\" height=\"224\"></video>\n                        <canvas style={{ display: 'none' }} ref={canvasRef} id=\"canvas\" width=\"224\" height=\"224\" />\n                        <div className={classes.captureControl}>\n                            <IconButton aria-label=\"capture\" onClick={() => captureVideo()}>\n                                <Camera />\n                            </IconButton>\n                        </div>\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Card>\n                    <List>\n                        {topkResult.map((item, index) => (\n                            <ListItem key={item.index}>\n                                <ListItemAvatar>\n                                    <Avatar>{index + 1}</Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary={ImageNetClassname[item.index.toString() as '0']}\n                                    secondary={`(${(item.value * 100).toFixed(2)}%)`}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n};\nexport default HomeContainer;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { Tensor, InferenceSession } from 'onnxruntime-web';\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CircularProgress,\n    makeStyles,\n    createStyles,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemAvatar,\n    Avatar,\n} from '@material-ui/core';\n\nimport { canvasToArray, drawImageToCanvas, fromHWCToCHW, ImageSize } from '../utils/image';\nimport { topk, TopkResult } from '../utils/fns';\nimport { loadModel } from '../utils/onnx';\n\nimport ImageNetClassname from '../classname.json';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        progress: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n        },\n        viewCenter: {\n            textAlign: 'center',\n        },\n        view: {\n            background: '#efefef',\n        },\n    })\n);\n\nconst imageOptions: ImageSize = {\n    width: 224,\n    height: 224,\n};\ninterface Props {}\nconst HomeContainer: React.FC<Props> = (props) => {\n    const classes = useStyles();\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [url, setURL] = useState<string>();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [topkResult, setTopkResult] = useState<TopkResult[]>([]);\n\n    const sessionPromise = useRef<Promise<InferenceSession>>();\n\n    useEffect(() => {\n        sessionPromise.current = loadModel(process.env.PUBLIC_URL + '/mobilenet_v3_small.onnx');\n    }, []);\n\n    useEffect(() => {\n        (async () => {\n            if (!url) {\n                return;\n            }\n            if (!sessionPromise.current) {\n                alert('沒有選擇模型!');\n                return;\n            }\n            setLoading(true);\n            try {\n                const session = await sessionPromise.current;\n                const canvas = await drawImageToCanvas(url, { imageSize: imageOptions, canvas: canvasRef.current! });\n                const arrImage = canvasToArray(canvas);\n                const imageCHW = fromHWCToCHW(arrImage, imageOptions);\n                const inputTensor = new Tensor('float32', imageCHW, [1, 3, 224, 224]);\n                const outputMap = await session.run({ input: inputTensor });\n                const topk5 = topk(outputMap.output.data as Float32Array);\n                setTopkResult(topk5);\n            } catch (err) {\n                console.error(err);\n            }\n            setLoading(false);\n        })();\n    }, [url]);\n\n    const modelInputRef = useRef<HTMLInputElement>(null);\n    const handlePickModel = () => {\n        modelInputRef.current?.click();\n    };\n    const modelInputChange = async (files?: File[]) => {\n        if (!files || files.length === 0) {\n            return;\n        }\n        sessionPromise.current = loadModel(files[0]);\n    };\n\n    const imageInputRef = useRef<HTMLInputElement>(null);\n    const handlePickImage = () => {\n        imageInputRef.current?.click();\n    };\n    const inputChange = (files?: File[]) => {\n        if (!files || files.length === 0) {\n            return;\n        }\n        setURL(URL.createObjectURL(files[0]));\n    };\n\n    return (\n        <Grid container spacing={2} justifyContent=\"center\">\n            <Grid item xs={12} md={4}>\n                <Card>\n                    <CardActions>\n                        <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={handlePickImage}>\n                            上傳圖片\n                            <input\n                                ref={imageInputRef}\n                                style={{ display: 'none' }}\n                                type=\"file\"\n                                name=\"image\"\n                                accept=\"image/*\"\n                                onChange={(e) => inputChange(e.target?.files as any as File[])}\n                            />\n                        </Button>\n                        <Button size=\"small\" color=\"secondary\" variant=\"contained\" onClick={handlePickModel}>\n                            更換模型\n                            <input\n                                ref={modelInputRef}\n                                style={{ display: 'none' }}\n                                type=\"file\"\n                                onChange={(e) => modelInputChange(e.target?.files as any as File[])}\n                            ></input>\n                        </Button>\n                    </CardActions>\n                    <CardContent className={classes.viewCenter}>\n                        {loading && (\n                            <div className={classes.progress}>\n                                <CircularProgress />\n                            </div>\n                        )}\n                        <canvas ref={canvasRef} className={classes.view} width=\"224\" height=\"224\" />\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Card>\n                    <List>\n                        {topkResult.map((item, index) => (\n                            <ListItem key={item.index}>\n                                <ListItemAvatar>\n                                    <Avatar>{index + 1}</Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary={ImageNetClassname[item.index.toString() as '0']}\n                                    secondary={`(${(item.value * 100).toFixed(2)}%)`}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n};\nexport default HomeContainer;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport { AppBar, Container, Toolbar, Typography, Button, createStyles, makeStyles, Theme } from '@material-ui/core';\n\nimport FromCameraContainer from './containers/FromCamera';\nimport FromFileContainer from './containers/FromFile';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        title: {\n            flexGrow: 1,\n        },\n        body: {\n            marginTop: theme.spacing(2),\n        },\n    })\n);\nconst App: React.FC = () => {\n    const classes = useStyles();\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <AppBar position=\"relative\">\n                <Toolbar>\n                    <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\n                        React Onnx\n                    </Typography>\n                    <nav>\n                        <Button component={Link} color=\"inherit\" to=\"/file\">\n                            從檔案\n                        </Button>\n                        <Button component={Link} color=\"inherit\" to=\"/camera\">\n                            從相機\n                        </Button>\n                    </nav>\n                </Toolbar>\n            </AppBar>\n            <Container className={classes.body}>\n                <Switch>\n                    <Route path=\"/\" exact component={FromFileContainer} />\n                    <Route path=\"/file\" exact component={FromFileContainer} />\n                    <Route path=\"/camera\" exact component={FromCameraContainer} />\n                </Switch>\n            </Container>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './styles/index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}