{"version":3,"sources":["utils/image.ts","utils/fns.ts","utils/onnx.ts","containers/FromCamera.tsx","containers/FromFile.tsx","App.tsx","index.tsx"],"names":["loadImage","url","Promise","resolve","reject","im","Image","crossOrigin","src","onload","drawImageToCanvas","imageUrl","options","a","canvas","document","createElement","resizeDrawToCanvas","image","sourceSize","width","height","targetSize","imageSize","source","hRatio","vRatio","ratio","Math","min","drawWidth","drwaHeight","centerShift_x","centerShift_y","getContext","drawImage","canvasToArray","getImageData","data","fromHWCToCHW","dataFromImage","ndarray","Float32Array","dataProcessed","ops","divseq","assign","pick","topk","k","Array","from","map","value","index","sort","b","slice","loadModel","path","session","InferenceSession","useStyles","makeStyles","createStyles","progress","position","top","left","viewCenter","textAlign","view","background","captureControl","display","justifyContent","bottom","right","imageOptions","HomeContainer","props","classes","videoRef","useRef","videoStreamRef","canvasRef","useState","loading","setLoading","setRecordLoading","topkResult","setTopkResult","sessionPromise","process","modelInputRef","modelInputChange","files","length","current","predit","alert","console","log","arrImage","imageCHW","inputTensor","Tensor","run","outputMap","output","values","next","topk5","error","captureVideo","max","coverDrawToCanvas","videoWidth","videoHeight","startTracking","navigator","mediaDevices","getUserMedia","audio","video","facingMode","aspectRatio","stream","srcObject","useEffect","getTracks","forEach","track","stop","stopTracking","Grid","container","spacing","justify","item","xs","md","Card","CardActions","Button","size","color","variant","onClick","click","ref","style","type","onChange","e","target","CardContent","className","CircularProgress","autoPlay","id","IconButton","aria-label","Camera","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","ImageNetClassname","toString","secondary","toFixed","setURL","imageInputRef","name","accept","URL","createObjectURL","theme","title","flexGrow","body","marginTop","App","basename","AppBar","Toolbar","Typography","noWrap","component","Link","to","Container","exact","FromFileContainer","FromCameraContainer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b57a9fd5.chunk.js","sourcesContent":["import ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\n\nexport function loadImage(url: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const im = new Image();\n        im.crossOrigin = 'anonymous';\n        im.src = url;\n        im.onload = () => {\n            resolve(im);\n        };\n    });\n}\n\nexport interface ImageSize {\n    width: number;\n    height: number;\n}\ninterface DrawImageToCanvasOptions {\n    canvas?: HTMLCanvasElement;\n    imageSize: ImageSize;\n}\nexport async function drawImageToCanvas(\n    imageUrl: string,\n    options: DrawImageToCanvasOptions\n): Promise<HTMLCanvasElement> {\n    const canvas = options.canvas || document.createElement('canvas');\n    const image = await loadImage(imageUrl);\n    resizeDrawToCanvas(image, canvas, {\n        sourceSize: {\n            width: image.width,\n            height: image.height,\n        },\n        targetSize: {\n            width: options.imageSize.width,\n            height: options.imageSize.height,\n        },\n    });\n    return canvas;\n}\n\ninterface ResizeDrawToCanvasOptions {\n    sourceSize: ImageSize;\n    targetSize: ImageSize;\n}\nexport function resizeDrawToCanvas(\n    source: CanvasImageSource,\n    canvas: HTMLCanvasElement,\n    options: ResizeDrawToCanvasOptions\n) {\n    const { sourceSize, targetSize } = options;\n    const hRatio = targetSize.width / sourceSize.width;\n    const vRatio = targetSize.height / sourceSize.height;\n    const ratio = Math.min(hRatio, vRatio);\n    const drawWidth = sourceSize.width * ratio;\n    const drwaHeight = sourceSize.height * ratio;\n    const centerShift_x = (targetSize.width - drawWidth) / 2;\n    const centerShift_y = (targetSize.height - drwaHeight) / 2;\n\n    const context = canvas.getContext('2d')!;\n    context.drawImage(\n        source,\n        0,\n        0,\n        sourceSize.width,\n        sourceSize.height,\n        centerShift_x,\n        centerShift_y,\n        drawWidth,\n        drwaHeight\n    );\n}\n\ninterface CoverDrawToCanvasOptions {\n    sourceSize: ImageSize;\n    targetSize: ImageSize;\n}\nexport function coverDrawToCanvas(\n    source: CanvasImageSource,\n    canvas: HTMLCanvasElement,\n    options: CoverDrawToCanvasOptions\n) {\n    const { sourceSize, targetSize } = options;\n    const hRatio = targetSize.width / sourceSize.width;\n    const vRatio = targetSize.height / sourceSize.height;\n    const ratio = Math.max(hRatio, vRatio);\n    const drawWidth = sourceSize.width * ratio;\n    const drwaHeight = sourceSize.height * ratio;\n    const centerShift_x = (targetSize.width - drawWidth) / 2;\n    const centerShift_y = (targetSize.height - drwaHeight) / 2;\n\n    const context = canvas.getContext('2d')!;\n    context.drawImage(\n        source,\n        0,\n        0,\n        sourceSize.width,\n        sourceSize.height,\n        centerShift_x,\n        centerShift_y,\n        drawWidth,\n        drwaHeight\n    );\n}\n\nexport function canvasToArray(canvas: HTMLCanvasElement): Uint8ClampedArray {\n    const context = canvas.getContext('2d')!;\n    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    return imageData.data;\n}\n\nexport function fromHWCToCHW(data: any, options: ImageSize): Float32Array {\n    const { width, height } = options;\n    const dataFromImage = ndarray(new Float32Array(data), [width, height, 4]);\n    const dataProcessed = ndarray(new Float32Array(width * height * 3), [1, 3, height, width]);\n    ops.divseq(dataFromImage, 255.0);\n    ops.assign(dataProcessed.pick(0, 0, null, null), dataFromImage.pick(null, null, 0));\n    ops.assign(dataProcessed.pick(0, 1, null, null), dataFromImage.pick(null, null, 1));\n    ops.assign(dataProcessed.pick(0, 2, null, null), dataFromImage.pick(null, null, 2));\n\n    return (dataProcessed.data as any) as Float32Array;\n}\n","export interface TopkResult {\n    index: number;\n    value: number;\n}\nexport function topk(data: Float32Array, k = 5) {\n    return Array.from(data)\n        .map<TopkResult>((value, index) => ({\n            index,\n            value,\n        }))\n        .sort((a, b) => b.value - a.value)\n        .slice(0, k);\n}\n","import { InferenceSession } from 'onnxjs';\n\nexport async function loadModel(path: Blob | string) {\n    const session = new InferenceSession({});\n    await session.loadModel(path as string);\n    return session;\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Tensor, InferenceSession } from 'onnxjs';\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CircularProgress,\n    makeStyles,\n    createStyles,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemAvatar,\n    Avatar,\n    IconButton,\n} from '@material-ui/core';\nimport { PlayArrow, Camera } from '@material-ui/icons';\nimport { canvasToArray, fromHWCToCHW, ImageSize, coverDrawToCanvas } from '../utils/image';\nimport { topk, TopkResult } from '../utils/fns';\nimport { loadModel } from '../utils/onnx';\n\nimport ImageNetClassname from '../classname.json';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        progress: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n        },\n        viewCenter: {\n            position: 'relative',\n            textAlign: 'center',\n        },\n        view: {\n            background: '#efefef',\n        },\n        captureControl: {\n            position: 'absolute',\n            display: 'flex',\n            justifyContent: 'center',\n            bottom: 0,\n            left: 0,\n            right: 0,\n        },\n    })\n);\n\nconst imageOptions: ImageSize = {\n    width: 224,\n    height: 224,\n};\n\ninterface Props {}\nconst HomeContainer: React.FC<Props> = (props) => {\n    const classes = useStyles();\n\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const videoStreamRef = useRef<MediaStream>();\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [recordLoading, setRecordLoading] = useState<boolean>(false);\n\n    const [topkResult, setTopkResult] = useState<TopkResult[]>([]);\n\n    const sessionPromise = useRef<Promise<InferenceSession>>(\n        loadModel(process.env.PUBLIC_URL + '/mobilenet_v3_small.onnx')\n    );\n\n    const modelInputRef = useRef<HTMLInputElement>(null);\n    const handlePickModel = () => {\n        modelInputRef.current?.click();\n    };\n    const modelInputChange = async (files?: File[]) => {\n        if (!files || files.length === 0) {\n            return;\n        }\n        sessionPromise.current = loadModel(files[0]);\n    };\n\n    const predit = async () => {\n        if (!canvasRef.current) {\n            return;\n        }\n        if (!sessionPromise.current) {\n            alert('沒有選擇模型!');\n            return;\n        }\n        setLoading(true);\n        try {\n            console.log('start pred');\n            const session = await sessionPromise.current;\n            const arrImage = canvasToArray(canvasRef.current);\n            const imageCHW = fromHWCToCHW(arrImage, imageOptions);\n            const inputTensor = new Tensor(imageCHW, 'float32', [1, 3, 224, 224]);\n            const outputMap = await session.run([inputTensor]);\n            const output: Float32Array = outputMap.values().next().value.data;\n            const topk5 = topk(output);\n            setTopkResult(topk5);\n        } catch (err) {\n            console.error(err);\n        }\n        setLoading(false);\n    };\n\n    const captureVideo = () => {\n        if (videoRef.current && canvasRef.current) {\n            coverDrawToCanvas(videoRef.current, canvasRef.current, {\n                sourceSize: {\n                    width: videoRef.current.videoWidth,\n                    height: videoRef.current.videoHeight,\n                },\n                targetSize: {\n                    width: canvasRef.current.width,\n                    height: canvasRef.current.height,\n                },\n            });\n            predit();\n        }\n    };\n    const startTracking = async () => {\n        setRecordLoading(true);\n        if (videoRef.current && navigator.mediaDevices.getUserMedia) {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio: false,\n                video: {\n                    width: 480,\n                    height: 360,\n                    facingMode: 'environment',\n                    aspectRatio: 1,\n                },\n            });\n            videoRef.current.srcObject = stream;\n            videoStreamRef.current = stream;\n        }\n    };\n    const stopTracking = () => {\n        setRecordLoading(false);\n        if (videoRef.current?.srcObject) {\n            videoRef.current.srcObject = null;\n        }\n        if (videoStreamRef.current) {\n            videoStreamRef.current.getTracks().forEach((track) => track.stop());\n        }\n    };\n    useEffect(() => {\n        return () => {\n            stopTracking();\n            console.log('call');\n        };\n    }, []);\n    return (\n        <Grid container spacing={2} justify=\"center\">\n            <Grid item xs={12} md={4}>\n                <Card>\n                    <CardActions>\n                        <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={() => startTracking()}>\n                            開始錄影\n                        </Button>\n                        <Button size=\"small\" color=\"secondary\" variant=\"contained\" onClick={handlePickModel}>\n                            更換模型\n                            <input\n                                ref={modelInputRef}\n                                style={{ display: 'none' }}\n                                type=\"file\"\n                                onChange={(e) => modelInputChange((e.target?.files as any) as File[])}\n                            ></input>\n                        </Button>\n                    </CardActions>\n                    <CardContent className={classes.viewCenter}>\n                        {loading && (\n                            <div className={classes.progress}>\n                                <CircularProgress />\n                            </div>\n                        )}\n                        <video ref={videoRef} autoPlay width=\"224\" height=\"224\"></video>\n                        <canvas style={{ display: 'none' }} ref={canvasRef} id=\"canvas\" width=\"224\" height=\"224\" />\n                        <div className={classes.captureControl}>\n                            <IconButton aria-label=\"capture\" onClick={() => captureVideo()}>\n                                <Camera />\n                            </IconButton>\n                        </div>\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Card>\n                    <List>\n                        {topkResult.map((item, index) => (\n                            <ListItem key={item.index}>\n                                <ListItemAvatar>\n                                    <Avatar>{index + 1}</Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary={ImageNetClassname[item.index.toString() as '0']}\n                                    secondary={`(${(item.value * 100).toFixed(2)}%)`}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n};\nexport default HomeContainer;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { Tensor, InferenceSession } from 'onnxjs';\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CircularProgress,\n    makeStyles,\n    createStyles,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemAvatar,\n    Avatar,\n} from '@material-ui/core';\n\nimport { canvasToArray, drawImageToCanvas, fromHWCToCHW, ImageSize } from '../utils/image';\nimport { topk, TopkResult } from '../utils/fns';\nimport { loadModel } from '../utils/onnx';\n\nimport ImageNetClassname from '../classname.json';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        progress: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n        },\n        viewCenter: {\n            textAlign: 'center',\n        },\n        view: {\n            background: '#efefef',\n        },\n    })\n);\n\nconst imageOptions: ImageSize = {\n    width: 224,\n    height: 224,\n};\ninterface Props {}\nconst HomeContainer: React.FC<Props> = (props) => {\n    const classes = useStyles();\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [url, setURL] = useState<string>();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [topkResult, setTopkResult] = useState<TopkResult[]>([]);\n\n    const sessionPromise = useRef<Promise<InferenceSession>>(\n        loadModel(process.env.PUBLIC_URL + '/mobilenet_v3_small.onnx')\n    );\n    useEffect(() => {\n        (async () => {\n            if (!url) {\n                return;\n            }\n            if (!sessionPromise.current) {\n                alert('沒有選擇模型!');\n                return;\n            }\n            setLoading(true);\n            try {\n                const session = await sessionPromise.current;\n                const canvas = await drawImageToCanvas(url, { imageSize: imageOptions, canvas: canvasRef.current! });\n                const arrImage = canvasToArray(canvas);\n                const imageCHW = fromHWCToCHW(arrImage, imageOptions);\n                const inputTensor = new Tensor(imageCHW, 'float32', [1, 3, 224, 224]);\n                const outputMap = await session.run([inputTensor]);\n                const output: Float32Array = outputMap.values().next().value.data;\n                const topk5 = topk(output);\n                setTopkResult(topk5);\n            } catch (err) {\n                console.error(err);\n            }\n            setLoading(false);\n        })();\n    }, [url]);\n\n    const modelInputRef = useRef<HTMLInputElement>(null);\n    const handlePickModel = () => {\n        modelInputRef.current?.click();\n    };\n    const modelInputChange = async (files?: File[]) => {\n        if (!files || files.length === 0) {\n            return;\n        }\n        sessionPromise.current = loadModel(files[0]);\n    };\n\n    const imageInputRef = useRef<HTMLInputElement>(null);\n    const handlePickImage = () => {\n        imageInputRef.current?.click();\n    };\n    const inputChange = (files?: File[]) => {\n        if (!files || files.length === 0) {\n            return;\n        }\n        setURL(URL.createObjectURL(files[0]));\n    };\n\n    return (\n        <Grid container spacing={2} justify=\"center\">\n            <Grid item xs={12} md={4}>\n                <Card>\n                    <CardActions>\n                        <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={handlePickImage}>\n                            上傳圖片\n                            <input\n                                ref={imageInputRef}\n                                style={{ display: 'none' }}\n                                type=\"file\"\n                                name=\"image\"\n                                accept=\"image/*\"\n                                onChange={(e) => inputChange((e.target?.files as any) as File[])}\n                            />\n                        </Button>\n                        <Button size=\"small\" color=\"secondary\" variant=\"contained\" onClick={handlePickModel}>\n                            更換模型\n                            <input\n                                ref={modelInputRef}\n                                style={{ display: 'none' }}\n                                type=\"file\"\n                                onChange={(e) => modelInputChange((e.target?.files as any) as File[])}\n                            ></input>\n                        </Button>\n                    </CardActions>\n                    <CardContent className={classes.viewCenter}>\n                        {loading && (\n                            <div className={classes.progress}>\n                                <CircularProgress />\n                            </div>\n                        )}\n                        <canvas ref={canvasRef} className={classes.view} width=\"224\" height=\"224\" />\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Card>\n                    <List>\n                        {topkResult.map((item, index) => (\n                            <ListItem key={item.index}>\n                                <ListItemAvatar>\n                                    <Avatar>{index + 1}</Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary={ImageNetClassname[item.index.toString() as '0']}\n                                    secondary={`(${(item.value * 100).toFixed(2)}%)`}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n};\nexport default HomeContainer;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport { AppBar, Container, Toolbar, Typography, Button, createStyles, makeStyles, Theme } from '@material-ui/core';\n\nimport FromCameraContainer from './containers/FromCamera';\nimport FromFileContainer from './containers/FromFile';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        title: {\n            flexGrow: 1,\n        },\n        body: {\n            marginTop: theme.spacing(2),\n        },\n    })\n);\nconst App: React.FC = () => {\n    const classes = useStyles();\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <AppBar position=\"relative\">\n                <Toolbar>\n                    <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\n                        React Onnx\n                    </Typography>\n                    <nav>\n                        <Button component={Link} color=\"inherit\" to=\"/file\">\n                            從檔案\n                        </Button>\n                        <Button component={Link} color=\"inherit\" to=\"/camera\">\n                            從相機\n                        </Button>\n                    </nav>\n                </Toolbar>\n            </AppBar>\n            <Container className={classes.body}>\n                {/* <Switch> */}\n                <Route path=\"/\" exact component={FromFileContainer} />\n                <Route path=\"/file\" exact component={FromFileContainer} />\n                <Route path=\"/camera\" exact component={FromCameraContainer} />\n                {/* </Switch> */}\n            </Container>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './styles/index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}